<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-03T11:42:06+02:00</updated><id>http://localhost:4000/</id><title type="html">Bytes and Tempo</title><subtitle>What's the difference between a dancer and a computer scientists?</subtitle><entry><title type="html">Happy Swamp CTF -&amp;gt; Orb2</title><link href="http://localhost:4000/write-ups/2018/04/02/swamp_p2.html" rel="alternate" type="text/html" title="Happy Swamp CTF -&gt; Orb2" /><published>2018-04-02T00:00:00+02:00</published><updated>2018-04-02T00:00:00+02:00</updated><id>http://localhost:4000/write-ups/2018/04/02/swamp_p2</id><content type="html" xml:base="http://localhost:4000/write-ups/2018/04/02/swamp_p2.html">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; --&gt;
&lt;p&gt;I tried to solve different tasks, but I was not so successful.
This write-up is complete from the point of view of the solution… but I didn’t managed to get the flag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So why am I posting it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because I think this is worth sharing. Be patient and keep reading ;-)&lt;/p&gt;

&lt;h1 id=&quot;the-task&quot;&gt;The task&lt;/h1&gt;
&lt;p&gt;The challenge is accessible via a zip folder. The password of that zip is the flag
of a previous challenge. The main contents of the folder are the following files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a lore for the challenge;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;examples.p&lt;/code&gt;: a pickle file containing, for each row a tuple of five floats and a couple of int;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;page_of_numbers.p&lt;/code&gt;: a pickle file containing, for each row a tuple of five floats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mmmh. What the hell?
Let’s read the lore. Be careful in reading this… &lt;em&gt;because this lore matters&lt;/em&gt;.
You’ll understand why at the bottom of this write-up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The acolytes of several monasteries have been studying possible origins of this attack for weeks.  
One of the most ancient and forbidden tomes contained in the great libraries talks about the origin of the purple dragon guard.  
It appears that in ancient times, long before spellscourge, they were formidable gate keepers of Cormyr to other planes.  
The most renowned branch of them fought back the great black dragon Thauglorimorgorus who was so ancient his scales turned purple.  
They ended up chasing it into the Vast Swamp and founded an encampment called The Swamp Fort of Cormyr.
In this fort was a portal to the shadow plane to where they had chased Thauglor.  
Those who entered never returned.  It appeared Thauglor had never been pushed back but all along was luring the militia to slaughter.  
In another expedition through the portal, desperate times forced a cleric to ask a miracle of Selûne.  
Our lady of silver had always been at odds with her twin, Shar, the mistress of night goddess of the plane of shadow.  
The call was answered and a counterpart of this fort sprang into being with a pillar of light which extinguished the magical darkness
for miles all around.  
Thauglor was repelled by this brilliant light.
This lead to many victories in this plane.  The guard resided here with the cleric at its head named The Lord of Light.  
She thus forward sat on the crystal throne and lead the guardians of this shining citadel known to all as The Ever Shining Army.
This appears to be solely a legend since the only known encampment in the Vast Swamp is known as the Lost Refuge
and is rumored to house those of Church of Shar, disciples of the shadow weave.  
They are nothing like those known in that legend.  
It is however known that there is a fortress on the other side ruled by the Dusk Lord known as the Shadow Citadel which is situated
on the edge of the Shadow Swamp.  
The mountains there are treacherous and the toxic rivers which run through the valleys sometimes lead historians to call it The Vale of Shadows.
One cleric has spent time divining a spell which determined that those pages of numbers previously found are trajectories
of the format &amp;lt;x position, y position, speed, angle above the horizontal, direction from the firing position&amp;gt;.  
It appears to be that there is a spell being cast using the shadow weave and the coordinates seem to indicate
that the spells location is in the kingdom of Cormyr.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically, each tuple corresponds to a bullet! I have a (x,y) position, the speed of shooting,
the angle above the horizontal and direction from shooting position.
It’s simple 3D physics: I need to calculate the trajectory of the bullet and it’s impact point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPOILER&lt;/strong&gt;: I was given a little aid by my dear brother &lt;a href=&quot;https://andreajens.gamejolt.io/&quot;&gt;Andrea&lt;/a&gt; (which is a Physicist).
I learnt something new while reasoning with him. I’m not talking about calculus, formulae or physics laws, but lateral thinking in genaral.
Having said that, let’s do some algebra.&lt;/p&gt;

&lt;h1 id=&quot;the-physics-behind-this-challenge&quot;&gt;The physics behind this challenge&lt;/h1&gt;
&lt;p&gt;I’m going to refer to &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt; for the position, &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; for speed, &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; for angle above the horizontal and &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; for the direction.
First of all, I need to understand how much time the bullet needs to fall to the ground again.
I can state that:&lt;/p&gt;
&lt;center&gt;
$$
v_z = vz0 - |g|t
$$
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
When it will reach the ground? On the vertex of the parabule, &lt;script type=&quot;math/tex&quot;&gt;v_z&lt;/script&gt; is zero, then &lt;script type=&quot;math/tex&quot;&gt;v_z&lt;/script&gt; must be
the opposite of &lt;script type=&quot;math/tex&quot;&gt;v_{z0}&lt;/script&gt; when it will touch the ground:&lt;/p&gt;
&lt;center&gt;
$$
v_z = -v_{z0} \\
-v_{z0} = v_{z0} - |g|t\\
t = \frac{2v_{z0}}{|g|}
$$
&lt;/center&gt;
&lt;p&gt;I have now &lt;strong&gt;when the bullet impacts the xy plane&lt;/strong&gt;. &lt;script type=&quot;math/tex&quot;&gt;v_{z0}&lt;/script&gt; is the projection of &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt; on the z axis.
This time I need the direction angle &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;:&lt;/p&gt;
&lt;center&gt;
$$
v_{z0} = vsin(\theta)
$$
&lt;/center&gt;
&lt;p&gt;It’s time to calculate how long the bullet will travel on x and y.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-04-02-swamp_p2/3dplane.jpg&quot; alt=&quot;This is our settings&quot; title=&quot;This is our settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I need to decompose the speed, projecting it on the &lt;script type=&quot;math/tex&quot;&gt;xz&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;yz&lt;/script&gt; plane:&lt;/p&gt;
&lt;center&gt;
$$
v_x = vcos(\theta)cos(\gamma)\\
v_y = vcos(\theta)sin(\gamma)\\
$$
&lt;/center&gt;
&lt;p&gt;Now that I have the projections of the speed, I can calculate the impact position.
I am going to use again the impact time calculated before:&lt;/p&gt;
&lt;center&gt;
$$
x_f = x + v_x * t \\
y_f = y + v_y * t
$$
&lt;/center&gt;

&lt;h1 id=&quot;its-time-to-fail&quot;&gt;It’s time to Fail&lt;/h1&gt;
&lt;p&gt;Even tough the model is correct, I couldn’t match the results of &lt;code class=&quot;highlighter-rouge&quot;&gt;examples.p&lt;/code&gt; file.
The model calculates the trajectory of a bullet from a point &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt; in space to &lt;script type=&quot;math/tex&quot;&gt;(x_f, y_f)&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-fact-it-was-the-contrary&quot;&gt;IN FACT IT WAS THE CONTRARY.&lt;/h2&gt;

&lt;p&gt;It is written &lt;em&gt;clearly&lt;/em&gt; in the lore:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;... direction from the firing position&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, the &lt;script type=&quot;math/tex&quot;&gt;(x,y)&lt;/script&gt; couple is an impact point, not a shooting point.
Signs need to be flipped here:&lt;/p&gt;
&lt;center&gt;
$$
x_f = x - v_x * t \\
y_f = y - v_y * t
$$
&lt;/center&gt;
&lt;p&gt;… leading to this flag.&lt;br /&gt;
&lt;img src=&quot;/assets/2018-04-02-swamp_p2/flag.jpg&quot; alt=&quot;This is the flag&quot; title=&quot;This is the flag&quot; /&gt;
We didn’t managed to capture the flag but we were so damn close. We had fun, that was the most important thing.&lt;/p&gt;

&lt;p&gt;See you next write-up ;)&lt;/p&gt;</content><author><name></name></author><summary type="html">I tried to solve different tasks, but I was not so successful. This write-up is complete from the point of view of the solution… but I didn’t managed to get the flag.</summary></entry><entry><title type="html">Happy Swamp CTF -&amp;gt; Journey</title><link href="http://localhost:4000/write-ups/2018/04/01/swamp_pt1.html" rel="alternate" type="text/html" title="Happy Swamp CTF -&gt; Journey" /><published>2018-04-01T00:00:00+02:00</published><updated>2018-04-01T00:00:00+02:00</updated><id>http://localhost:4000/write-ups/2018/04/01/swamp_pt1</id><content type="html" xml:base="http://localhost:4000/write-ups/2018/04/01/swamp_pt1.html">&lt;p&gt;Hi everybody, it’s a shiny new day for a write-up!
The past two days were really busy in &lt;span style=&quot;color: blue&quot;&gt;&lt;a href=&quot;http://zenhack.team&quot;&gt;ZenHack&lt;/a&gt;&lt;/span&gt; headquarter:
we decided to deep dive into &lt;span style=&quot;color: blue&quot;&gt;&lt;a href=&quot;https://play.swampctf.com/&quot;&gt;Swamp CTF&lt;/a&gt;&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;The write-up I want to show you is the solution of &lt;strong&gt;Journey&lt;/strong&gt;, the second Reversing challenge.
This is a samplle output of the program:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As you play this game, there will be many adventures for you to take,
quests on the side of this great journey.
This is one of the quests here, and you may not know it yet. You will
know when you complete the test, because all of the die will have been
cast in your favor.
Prove your worth, enter a password to continue!

&amp;gt; I'm a Tucano

Mission failed! You must try again, giving up was never an answer if
you have gotten this far!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Basically, it wants a password. Let’s try to guess what it does with &lt;span style=&quot;color: blue&quot;&gt;&lt;a href=&quot;http://rada.re&quot;&gt;radare2&lt;/a&gt;&lt;/span&gt;.
The main function of journey just print that wall of text. There is a &lt;em&gt;scanf&lt;/em&gt;: &lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x080488cb      8d45e2         lea eax, [INPUTSTR]
0x080488ce      50             push eax
0x080488cf      68ecb20b08     push str.17s  (which is &quot;%17s&quot;)
0x080488d4      e897670000     call sym.__isoc99_scanf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It reads a string of 17 non blank characters. It can’t be pwned :\
The interesting part of the binary is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     0x080488eb      8945cc         mov dword [STRLEN], eax
     0x080488ee      c745d0000000.  mov dword [VARIABLE], 0
     0x080488f5      c745d89153d2.  mov dword [BIGNUM_LOW], 0x67d25391
     0x080488fc      c745dc3b8f32.  mov dword [BIGNUM_HIGH], 0x328f3b
     0x08048903      c745c8000000.  mov dword [COUNTER], 0
 ,=&amp;lt; 0x0804890a      eb55           jmp 0x8048961               ;[2]
.--&amp;gt; 0x0804890c      8b45d8         mov eax, dword [BIGNUM_LOW]
:|   0x0804890f      8b55dc         mov edx, dword [BIGNUM_HIGH]
:|   0x08048912      6a00           push 0
:|   0x08048914      6a0a           push 0xa                    ; 10
:|   0x08048916      52             push edx
:|   0x08048917      50             push eax
:|   0x08048918      e843020000     call sym.__moddi3           ;[3]
:|   0x0804891d      83c410         add esp, 0x10
:|   0x08048920      8945d0         mov dword [VARIABLE], eax
:|   0x08048923      8b45d8         mov eax, dword [BIGNUM_LOW]
:|   0x08048926      8b55dc         mov edx, dword [BIGNUM_HIGH]
:|   0x08048929      6a00           push 0
:|   0x0804892b      6a0a           push 0xa                    ; 10
:|   0x0804892d      52             push edx
:|   0x0804892e      50             push eax
:|   0x0804892f      e8bc000000     call sym.__divdi3           ;[4]
:|   0x08048934      83c410         add esp, 0x10
:|   0x08048937      8945d8         mov dword [BIGNUM_LOW], eax
:|   0x0804893a      8955dc         mov dword [BIGNUM_HIGH], edx
:|   0x0804893d      8d55e2         lea edx, [INPUTSTR]
:|   0x08048940      8b45c8         mov eax, dword [COUNTER]
:|   0x08048943      01d0           add eax, edx
:|   0x08048945      0fb600         movzx eax, byte [eax]
:|   0x08048948      89c2           mov edx, eax
:|   0x0804894a      8b45d0         mov eax, dword [VARIABLE]
:|   0x0804894d      29c2           sub edx, eax
:|   0x0804894f      89d0           mov eax, edx
:|   0x08048951      89c1           mov ecx, eax
:|   0x08048953      8d55e2         lea edx, [INPUTSTR]
:|   0x08048956      8b45c8         mov eax, dword [COUNTER]
:|   0x08048959      01d0           add eax, edx
:|   0x0804895b      8808           mov byte [eax], cl
:|   0x0804895d      8345c801       add dword [COUNTER], 1
:`-&amp;gt; 0x08048961      8b45c8         mov eax, dword [COUNTER]
:    0x08048964      3b45cc         cmp eax, dword [STRLEN]
`==&amp;lt; 0x08048967      7ca3           jl 0x804890c;
     0x08048969      83ec08         sub esp, 8
     0x0804896c      68f1b20b08     push str.theresanotherstep
     0x08048971      8d45e2         lea eax, [local_1eh]
     0x08048974      50             push eax
     0x08048975      e806f9ffff     call fcn.08048280           ;[2]
     0x0804897a      83c410         add esp, 0x10
     0x0804897d      8945d4         mov dword [local_2ch], eax
     0x08048980      837dd400       cmp dword [local_2ch], 0
 ,=&amp;lt; 0x08048984      7532           jne 0x80489b8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems a bit though, isn’t it?&lt;/p&gt;
&lt;h2 id=&quot;lets-reverse-it&quot;&gt;Let’s reverse it.&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.--&amp;gt; 0x0804890c      8b45d8         mov eax, dword [BIGNUM_LOW]
:|   0x0804890f      8b55dc         mov edx, dword [BIGNUM_HIGH]
:|   0x08048912      6a00           push 0
:|   0x08048914      6a0a           push 0xa                    ; 10
:|   0x08048916      52             push edx
:|   0x08048917      50             push eax
:|   0x08048918      e843020000     call sym.__moddi3           ;[3]
:|   0x0804891d      83c410         add esp, 0x10
:|   0x08048920      8945d0         mov dword [VARIABLE], eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;first-tricky-part&quot;&gt;FIRST TRICKY PART&lt;/h1&gt;
&lt;p&gt;What’s that strange &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.__moddi3&lt;/code&gt;?
It’s basically &lt;code class=&quot;highlighter-rouge&quot;&gt;a%b&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;a,b -&amp;gt; long&lt;/code&gt;. This is why there are two push on the stack for each argument.
The first one is BIGNUM (divided in HIGH and LOW), while the second is 10 (in 64 bit, so 63 &lt;code class=&quot;highlighter-rouge&quot;&gt;\x00&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;\x0a&lt;/code&gt;).
Then, the reminder result is put in VARIABLE.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:|   0x0804891d      83c410         add esp, 0x10
:|   0x08048920      8945d0         mov dword [VARIABLE], eax
:|   0x08048923      8b45d8         mov eax, dword [BIGNUM_LOW]
:|   0x08048926      8b55dc         mov edx, dword [BIGNUM_HIGH]
:|   0x08048929      6a00           push 0
:|   0x0804892b      6a0a           push 0xa                    ; 10
:|   0x0804892d      52             push edx
:|   0x0804892e      50             push eax
:|   0x0804892f      e8bc000000     call sym.__divdi3           ;[4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program then computes the division of BIGNUM and 10 (which is performed by &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.__divdi3&lt;/code&gt;, again it’s division between long)…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:|   0x08048937      8945d8         mov dword [BIGNUM_LOW], eax
:|   0x0804893a      8955dc         mov dword [BIGNUM_HIGH], edx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;… and stores the new BIGNUM in its original location.&lt;/p&gt;

&lt;h1 id=&quot;second-tricky-part&quot;&gt;SECOND TRICKY PART&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:|   0x0804893d      8d55e2         lea edx, [INPUTSTR]
:|   0x08048940      8b45c8         mov eax, dword [COUNTER]
:|   0x08048943      01d0           add eax, edx
:|   0x08048945      0fb600         movzx eax, byte [eax]
:|   0x08048948      89c2           mov edx, eax
:|   0x0804894a      8b45d0         mov eax, dword [VARIABLE]
:|   0x0804894d      29c2           sub edx, eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The program takes the vlaue of the calculated reminder and subtracts is from the current
char pointed by &lt;code class=&quot;highlighter-rouge&quot;&gt;INPUTSTR+COUNTER&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:|   0x0804894f      89d0           mov eax, edx
:|   0x08048951      89c1           mov ecx, eax
:|   0x08048953      8d55e2         lea edx, [INPUTSTR]
:|   0x08048956      8b45c8         mov eax, dword [COUNTER]
:|   0x08048959      01d0           add eax, edx
:|   0x0804895b      8808           mov byte [eax], cl
:|   0x0804895d      8345c801       add dword [COUNTER], 1
:`-&amp;gt; 0x08048961      8b45c8         mov eax, dword [COUNTER]
:    0x08048964      3b45cc         cmp eax, dword [STRLEN]
`==&amp;lt; 0x08048967      7ca3           jl 0x804890c;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’s time for checking if the cycles has to be repeated. The guard is the length of the input string.
Basically, this for read each character in the input string.&lt;/p&gt;

&lt;h1 id=&quot;third-tricky-part&quot;&gt;THIRD TRICKY PART&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0804896c      68f1b20b08     push str.theresanotherstep
0x08048971      8d45e2         lea eax, [INPUTSTR]
0x08048974      50             push eax
0x08048975      e806f9ffff     call fcn.08048280           ;[2]
0x0804897a      83c410         add esp, 0x10
0x0804897d      8945d4         mov dword [local_2ch], eax
0x08048980      837dd400       cmp dword [local_2ch], 0
0x08048984      7532           jne 0x80489b8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wait wait wait wait. There is a comparison between 0 and the result of that function.
Which arguments does it take? The input string and… a constant string.
Remember that Journey manipulated INPUTSTR with reminders, divisions, subtractions and so on.
If the result is zero, then it prints a greetings (the flag is &lt;em&gt;flag{&amp;lt;INPUTSTR&amp;gt;}&lt;/em&gt;).
The binary isn’t stripped, so… &lt;strong&gt;which function is that?&lt;/strong&gt;
It’s a normal &lt;code class=&quot;highlighter-rouge&quot;&gt;strcmp&lt;/code&gt;, dynamically linked using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.plt.got&lt;/code&gt; table:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DATA XREF from 0x08048280 (fcn.08048280)
0x080ea038      .dword 0x0805b740 ; sym.strcmp  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, if the manipulated string is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;theresanotherstep&lt;/code&gt; the job is done.&lt;/p&gt;

&lt;p&gt;All the ingredients have been introduced. Let’s hack this challenge!&lt;/p&gt;

&lt;h1 id=&quot;the-intuition&quot;&gt;The Intuition&lt;/h1&gt;
&lt;p&gt;If you didn’t fell asleep until now than you’re only few steps away to the solution. Let me recap what does Journey do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Takes an input string -&amp;gt; INPUTSTR&lt;/li&gt;
  &lt;li&gt;for each char in INPUTSTR:
    &lt;ul&gt;
      &lt;li&gt;it calculates INPUTSTR[i] = INPUTSTR[i] - BIGNUM &amp;amp; 10&lt;/li&gt;
      &lt;li&gt;BIGNUM=BIGNUM/10&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check if the manipulated string is equal to a const string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does it mean to divide and take the mod of a long int number?&lt;/p&gt;

&lt;p&gt;It’s simple: &lt;strong&gt;extract the last digit of the number&lt;/strong&gt;. So, the algorithm subtracts the last digit of BIGNUM from
INPUTSTR. Given the const string, here I present the algorithm I used to reverse the process:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'theresanotherstep'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'14231234143212433'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run it, to obtain the correct INPUTSTR: &lt;code class=&quot;highlighter-rouge&quot;&gt;wkitfudrpxkgsvviq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The flag is &lt;code class=&quot;highlighter-rouge&quot;&gt;flag{wkitfudrpxkgsvviq}&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hi everybody, it’s a shiny new day for a write-up! The past two days were really busy in ZenHack headquarter: we decided to deep dive into Swamp CTF!</summary></entry></feed>